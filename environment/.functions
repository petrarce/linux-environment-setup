#!/bin/bash
function runRemoteScript() {
    set -x
    
    host=${1}
    pathToScript=${2}
    shift
    shift
    ssh ${host} "sh -s " -- < ${pathToScript} $@

    set +x
}

function runVlcMp4HttpStream(){


	getopt -o p:s: -l -port:-src -- "$@"
	if [ "$?" !== "0" ]; then
		return 1
	fi 

	local ARGS="$(getopt -o p:s:v -l -port:-src: -- "$@")"
	eval set -- "${ARGS}"

	local httpPort=80
	local srcVideo=""
	local verbose=""
	while true; do
		case "${1}" in
			-s|-src) srcVideo="${2}"; shift 2;;
			-p|-port) httpPort="${2}"; shift 2;;
			-v) verbose="-vvv"; shift;;
			--) shift; break;;
			*) echo "Unexpected option $1"; return 1;;
		esac
	done

	cvlc ${verbose} \
		--sout '#transcode{vcodec=h264}:std{access=http{mime=video/mp4},mux=ts,dst=:'"${httpPort}"'}' \
		--loop \
		--sout-keep \
		"$(realpath "${srcVideo}")"

}

hg() {
    history | grep "$1"
}

function setup-toolchain-environment() {
	local environmentSetupScript=${1}
	CURRENT_PATH="${PATH}"
	source ${environmentSetupScript}
	export PATH="${PATH}:${CURRENT_PATH}"
}

function setup-template() {
	local targetDirectory="${1}"
	local templateGithubLink="${2}"
	mkdir "${targetDirectory}"
	# wget https://github.com/petrarce/cmake-project-template/archive/refs/heads/master.zip -O "${targetDirectory}/master.zip"
	wget "${templateGithubLink}" -O "${targetDirectory}/master.zip"
	unzip -d "${targetDirectory}" "${targetDirectory}/master.zip"
	rm "${targetDirectory}/master.zip"
}

function setup-cmake-template() {
	setup-template ${1} https://github.com/petrarce/cmake-project-template/archive/refs/heads/master.zip
}

function perf-flamegraph-from-script-file() {
	PERF_SCRIPT_FILE_PATH="$(realpath ${1})"

	OUT_FILE_PATH="$(realpath ${2})"
	OUT_FILE_NAME="$(basename ${OUT_FILE_PATH})"

	#cat ${PERF_FILE_PATH} | perf-flamegraph "${PERF_FILE_DIR}/${PERF_FILE_NAME}.svg"
	stackcollapse-perf.pl "${PERF_SCRIPT_FILE_PATH}" > "/tmp/${OUT_FILE_NAME}.perf-folded";
	flamegraph.pl --width 1900 --minwidth 2 "/tmp/${OUT_FILE_NAME}.perf-folded" > "${OUT_FILE_PATH}"
}


function perf-script() {
	local FILE_PATH="${1}"
	local LOCAL_PERF_DATA="${PWD}/perf.data"
	if [ -f "${LOCAL_PERF_DATA}" ]; then
		echo-err "$0 failed: ${LOCAL_PERF_DATA} already exists"
	fi
	ln -s "${FILE_PATH}" "${PWD}/perf.data"
	perf script | c++filt
	rm perf.data
}

function perf-record-script() {
	set -x
	local PID="${1}"
	local TEST_NAME="${2}"
	local PERF_RECORD_TYPE="${3}"
	local RECORD_TIME_SEC="${4}"

	local TEST_PERF_FILE="${TEST_NAME}.perf"
	local TEST_SCRIPT_FILE="${TEST_NAME}.script"

	if [ -z "${PERF_RECORD_TYPE}" ]; then
		PERF_RECORD_TYPE="30"
	fi

	if [ "${PERF_RECORD_TYPE}" == "dwarf" ]; then
		perf-record-dwarf -p "${PID}" -o "${TEST_PERF_FILE}" -- sleep "${RECORD_TIME_SEC}"
	else
		perf-record-fp -p "${PID}" -o "${TEST_PERF_FILE}" -- sleep "${RECORD_TIME_SEC}"
	fi

	perf-script "${TEST_PERF_FILE}" > "${TEST_SCRIPT_FILE}"
	set +x
}

function perf-to-svg {
	set -x
	if [ "${1}" == "--help" ]; then
		echo  "usage: perf-to-svg <text-name> <PID> [<SecondsToProfile=30>]"
		return;
	fi
	local TEST_NAME="${1}"
	local PROCES_PID="${2}"
	if [ -z "${TEST_NAME}" ] || [ -z "${PROCES_PID}" ]; then
		return;
	fi
	local secToProfile="${3}"
	if [ -z "${secToProfile}" ]; then
		secToProfile=30
	fi 

	perf-record-script "${PROCES_PID}" "${TEST_NAME}" dwarf "${secToProfile}"
	perf-flamegraph-from-script-file "${TEST_NAME}.script" "${TEST_NAME}.svg"
	ns "FINISH perf-to-svg ${TEST_NAME}"
	set +x
}

print_progress() {
	local progress="$1"
	local msg="${2}"
	local bar_length=20
	local fill_length=$((progress * bar_length / 100))
	local empty_length=$((bar_length - fill_length))

	 printf "\r[%-*s%*s] %d:$msg%%" "$fill_length" "" "$empty_length" "" "$progress"
}
function git-merge-for-commit(){
	TARGET_COMMIT="${1}";
	HEAD_COMMIT="${2}";
	
	local merge_commit_str=$(git log "${TARGET_COMMIT}"^.."${HEAD_COMMIT}" --merges --format="%H" | tac);
	local merge_commits;
	IFS=$'\n' read -r -d '' -a merge_commits <<< "${merge_commit_str}";
	local num_commits="${#merge_commits[@]}";

	echo "num_commits=${num_commits}";

	for((i = 0; i < num_commits; i++)); do

		local prgs=$((${i} * 100 / ${num_commits}));
		print_progress "${prgs}";
		
		local merge_commit="${merge_commits[i]}"
		local target_commit_str_grep="$(git log --format="%H" ${merge_commit}^..${merge_commit} | grep "${TARGET_COMMIT}")";
		if [ -n "${target_commit_str_grep}" ]; then 
			echo "${TARGET_COMMIT} came from $(git show --no-patch ${merge_commit})"; 
			return;
		fi;
	done
	echo "No merge commit found for the target commit: ${TARGET_COMMIT} starting from ${HEAD_COMMIT}"
}

git-cherry-pick-merge() {
	for hash in "$@"; do
		git cherry-pick -m1 "${hash}^".."${hash}";
		git commit --allow-empty;
	done
}

function android-logcat-app() {

	local package_name="${1}"

	adb logcat --pid=$(adb shell pidof -s "${package_name}")
}

function android-app-admin-signature-checksum() {
	local path_to_app="${1}"

	keytool  -printcert -jarfile "$(realpath "${path_to_app}")" \
		| grep -Po "(?<=SHA256:) .*" \
		| xxd -r -p \
		| openssl base64 \
		| tr -d '=' \
		| tr -- '+/=' '-_'
}

function ln-apps() {
	local APP_PATH="$(realpath "$1")"
	local APP_ALIAS="$2"
	if [ ! -f "${APP_PATH}" ]; then
		echo-err "No file to link to executable: ${APP_PATH}" 
		return;
	fi

	if [ -z "$2" ]; then
		APP_ALIAS="$(basename "${APP_PATH}")"  
	fi
	
	echo "${APP_PATH}, ${APP_ALIAS}"
	ln -s "${APP_PATH}" "${HOME}/apps/bin/${APP_ALIAS}"

}

function git-merges-for-file() 
{
	local FILE="${1}"
	local SOURCE_TARGET="${2}"
	local DEST_TARGET="${3}"
	
	if [ -z "${DEST_TARGET}" ]; then
		 DEST_TARGET="${SOURCE_TARGET}"
	fi

	for i in $(git log "${SOURCE_TARGET}" --format=format:"%h" -- "${FILE}"); do 
		git-merge-for-commit $i "${DEST_TARGET}"; 
	done
}

function conjugate() {

	firefox "https://conjugator.reverso.net/conjugation-english-verb-${1}.html"
}